<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment - IaaS - Infrastructure as a Service" enabled="true"/>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Abstract" enabled="false">
          <stringProp name="BeanShellSampler.query">Jan-12-2016 : Rob Olenick : 00000 :Intiaial Creation of ACP_Validation_IaaS Integration Test
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Revision History" enabled="true">
          <stringProp name="BeanShellSampler.query">// Tests created by Karuna Gaur
//  Check if LBaas VIP can ping DockerRepo</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set serviceName = IaaS" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;serviceName&quot;,&quot;IaaS&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myStartdate = sdf.format(now); // format date as string
vars.put(&quot;myStartdate&quot;,myStartdate); // save date to JMeter variable named &quot;mydate&quot;
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BEGIN IaaS - Infrastructure as a Service for Site Name = ${__property(serverSite,)} at ${myStartdate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">//log.info(&quot;**********&quot;);
//log.info(&quot;Start of test for IaaS -Infrastructure as a Service for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myStartdate&quot;));
//log.info(&quot;**********&quot;); </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** IaaS - Infrastructure as a Service *****" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;IaaS : Infrastructure as a Service&quot;);
log.info(&quot;-&quot;);
log.info(&quot;Start of test for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myStartdate&quot;));
log.info(&quot;______________________________________________________&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Check FAILURE log messages" enabled="false">
          <stringProp name="BeanShellSampler.query">if ( props.getProperty(&quot;inventoryFile&quot;) != null) {
   inventoryFileName = props.getProperty(&quot;inventoryFile&quot;);
}
else {
	
	inventoryFileName = &quot;/home/docker/cloud-service-scripts/playbooks/inventory&quot;;
}
testName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; lbaas --list-hosts 2&gt;&amp;1 &quot;;

status = &quot; FAILED &quot;;

log.info(${__P(LOGMARKER,__ACP__)} + testName + status );


testName=&quot; host lbaas &quot;;
status = &quot; FAILED &quot;;

log.info(${__P(LOGMARKER,__ACP__)} + testName + status );


testName=&quot; uname -n &quot;;
status = &quot; FAILED &quot;;

log.info(${__P(LOGMARKER,__ACP__)} + testName + status );


testName=&quot; ping -c 5 lbaas &quot;;
status = &quot; FAILED &quot;;

log.info(${__P(LOGMARKER,__ACP__)} + testName + status );

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Docker Repo host tests " enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot; &quot;);
log.info(&quot;	### DockerRepo Node Tests ###&quot;);
log.info(&quot; &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the installed version of Docker meets the minimum requirements" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - docker --version" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name docker --version" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">runTestName=&quot; docker --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check if Docker version meets minimum requirements &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);

logTestNameNoneFound=&quot; docker --version &quot;;
vars.put(&quot;logTestNameNoneFound&quot;,logTestNameNoneFound);

//apparently the BeanShell assertion with the function does not support the &quot;${__P(LOGMARKER,__ACP__)}&quot; syntax
// so... for the compare Docker Version against the min version configure the following property to be used 
sLOGMARKER = &quot;${__P(LOGMARKER,__ACP__)}&quot;;
props.setProperty(&quot;sLOGMARKER&quot;,sLOGMARKER);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerVersionActual</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){2}(\S+)\,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no version found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){w} matches 2 words (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Docker Version &quot;;
String expectedValue = props.getProperty(&quot;dockerVersionMinimum&quot;); 
String actualValue = vars.get(&quot;dockerVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;dockerVersionActual&quot;);
minVersion = props.getProperty(&quot;dockerVersionMinimum&quot;);

//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the Docker Service is running" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - sudo service docker status" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name sudo service docker status" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">runTestName=&quot; sudo service docker status &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check if Docker service is running &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor  - (.*(running).*) $1$" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerIsRunningActualFullText</stringProp>
                <stringProp name="RegexExtractor.regex">(.*(running).*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">000</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">runTestName=&quot; sudo service docker status &quot; ; 
command return string =
docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled)
   Active: active (running) since Fri 2016-01-15 11:42:05 EST; 5 days ago
     Docs: https://docs.docker.com
 Main PID: 7699 (docker)
   CGroup: /system.slice/docker.service
           ├─ 7699 /usr/bin/docker daemon -H fd:// --selinux-enabled=true -H tcp://0.0.0.0:2375 -H tcp://0.0.0.0:4243 -H unix:///var...
           └─12742 docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 5000 -container-ip 172.17.0.2 -container-port 5000

Jan 20 10:19:32 dockerrepo docker[7699]: time=&quot;2016-01-20T10:19:32.494789013-05:00&quot; level=info msg=&quot;POST /v1.20/containers/cr...gistry&quot;
Jan 20 10:19:32 dockerrepo docker[7699]: time=&quot;2016-01-20T10:19:32.990182834-05:00&quot; level=info msg=&quot;POST /v1.20/containers/a9.../start&quot;
Jan 20 10:19:38 dockerrepo docker[7699]: time=&quot;2016-01-20T10:19:38.177325162-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 11:49:38 dockerrepo docker[7699]: time=&quot;2016-01-20T11:49:38.719865989-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:37:06 dockerrepo docker[7699]: time=&quot;2016-01-20T12:37:06.845562905-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:37:07 dockerrepo docker[7699]: time=&quot;2016-01-20T12:37:07.372931941-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:37:07 dockerrepo docker[7699]: time=&quot;2016-01-20T12:37:07.937491171-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:39:27 dockerrepo docker[7699]: time=&quot;2016-01-20T12:39:27.548000934-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 15:25:24 dockerrepo docker[7699]: time=&quot;2016-01-20T15:25:24.300889143-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 15:26:43 dockerrepo docker[7699]: time=&quot;2016-01-20T15:26:43.096808241-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Hint: Some lines were ellipsized, use -l to show in full.
Matc Groups
1.	Active: active (running) since Fri 2016-01-15 11:44:23 EST; 5 days ago
2.	running</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor  - (.*(running).*) $2$" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerIsRunningActual</stringProp>
                <stringProp name="RegexExtractor.regex">(.*(running).*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">000</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">runTestName=&quot; sudo service docker status &quot; ; 
command return string =
docker (pid  1988) is running...
 
Matc Groups
1.	docker (pid 1988) is running...
2.	docker
3.	1988
4.	is
5.	running</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">//Assertion : the Docker Service is running
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; Docker Running &quot;;
//String expectedValue = &quot;docker (pid &quot; + vars.get(&quot;dockerPID&quot;) + &quot;) is running...&quot;; 
String expectedValue = &quot;running&quot;;
String actualValue = vars.get(&quot;dockerIsRunningActual&quot;);
String actualValueFullText = vars.get(&quot;dockerIsRunningActualFullText&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;Docker Service status : &quot; + actualValueFullText ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The Docker Service is not running&quot; ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}

// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the httpd Service is running" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - sudo service httpd status" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name sudo service httpd status" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">runTestName=&quot; sudo service httpd status &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check if httpd service is running &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor  - (.*(running).*) $1$" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">httpdIsRunningActualFullText</stringProp>
                <stringProp name="RegexExtractor.regex">(.*(running).*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">000</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">runTestName=&quot; sudo service docker status &quot; ; 
command return string =
docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled)
   Active: active (running) since Fri 2016-01-15 11:42:05 EST; 5 days ago
     Docs: https://docs.docker.com
 Main PID: 7699 (docker)
   CGroup: /system.slice/docker.service
           ├─ 7699 /usr/bin/docker daemon -H fd:// --selinux-enabled=true -H tcp://0.0.0.0:2375 -H tcp://0.0.0.0:4243 -H unix:///var...
           └─12742 docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 5000 -container-ip 172.17.0.2 -container-port 5000

Jan 20 10:19:32 dockerrepo docker[7699]: time=&quot;2016-01-20T10:19:32.494789013-05:00&quot; level=info msg=&quot;POST /v1.20/containers/cr...gistry&quot;
Jan 20 10:19:32 dockerrepo docker[7699]: time=&quot;2016-01-20T10:19:32.990182834-05:00&quot; level=info msg=&quot;POST /v1.20/containers/a9.../start&quot;
Jan 20 10:19:38 dockerrepo docker[7699]: time=&quot;2016-01-20T10:19:38.177325162-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 11:49:38 dockerrepo docker[7699]: time=&quot;2016-01-20T11:49:38.719865989-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:37:06 dockerrepo docker[7699]: time=&quot;2016-01-20T12:37:06.845562905-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:37:07 dockerrepo docker[7699]: time=&quot;2016-01-20T12:37:07.372931941-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:37:07 dockerrepo docker[7699]: time=&quot;2016-01-20T12:37:07.937491171-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 12:39:27 dockerrepo docker[7699]: time=&quot;2016-01-20T12:39:27.548000934-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 15:25:24 dockerrepo docker[7699]: time=&quot;2016-01-20T15:25:24.300889143-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Jan 20 15:26:43 dockerrepo docker[7699]: time=&quot;2016-01-20T15:26:43.096808241-05:00&quot; level=info msg=&quot;GET /v1.20/containers/json&quot;
Hint: Some lines were ellipsized, use -l to show in full.
Matc Groups
1.	Active: active (running) since Fri 2016-01-15 11:44:23 EST; 5 days ago
2.	running</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor  - (.*(running).*) $2$" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">httpdIsRunningActual</stringProp>
                <stringProp name="RegexExtractor.regex">(.*(running).*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">000</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">runTestName=&quot; sudo service docker status &quot; ; 
command return string =
docker (pid  1988) is running...
 
Matc Groups
1.	docker (pid 1988) is running...
2.	docker
3.	1988
4.	is
5.	running</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">//Assertion : the httpd Service is running
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; httpd Running &quot;;
//String expectedValue = &quot;docker (pid &quot; + vars.get(&quot;dockerPID&quot;) + &quot;) is running...&quot;; 
String expectedValue = &quot;running&quot;;
String actualValue = vars.get(&quot;httpdIsRunningActual&quot;);
String actualValueFullText = vars.get(&quot;httpdIsRunningActualFullText&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;httpd Service status : &quot; + actualValueFullText ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The httpd Service is not running&quot; ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}

// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the installed version of DockerRegistry meets the minimum requirements" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - sudo docker ps | grep docker-registry | awk &apos;{ print $2}&apos;" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name Check Docker Registry version" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">runTestName=&quot; sudo docker ps | grep docker-registry | awk &apos;{ print $2}&apos; &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check Docker Registry version &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerRegistryVersionActual</stringProp>
                <stringProp name="RegexExtractor.regex">registry:(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no version found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments"> 
command return string =
 registry:0.9.1
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Docker Registry Version &quot;;
String expectedValue = props.getProperty(&quot;dockerRegistryVersionMinimum&quot;); 
String actualValue = vars.get(&quot;dockerRegistryVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;dockerRegistryVersionActual&quot;);
minVersion = props.getProperty(&quot;dockerRegistryVersionMinimum&quot;);
                                
//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the installed version of Docker Compose meets the minimum requirements" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - docker-compose --version" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">10000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name docker --version" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">runTestName=&quot; /usr/sbin/docker-compose --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check Docker Compose version &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerComposeVersionActual</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no version found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){w} matches 2 words (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor [^ ]+$" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerComposeVersionActual</stringProp>
                <stringProp name="RegexExtractor.regex">([^ ]+$)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no version found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">[^ ]+$ matches the last word preceed by a space
command return string =
docker-compose version: 1.4.0
docker-compose 1.2.0  

it will return 1.4.0 or 1.2.0 depending on the result
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (\d{1,}.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerComposeVersionActual</stringProp>
                <stringProp name="RegexExtractor.regex">(\d{1,}.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no version found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">[(\d{1,}\.)] matches 1 or more digits followed by a dot
command return string =
docker-compose version: 1.4.0
docker-compose 1.2.0  

it will return 1.4.0 or 1.2.0 depending on the result
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Docker Compose Version &quot;;
String expectedValue = props.getProperty(&quot;dockerComposeVersionMinimum&quot;); 
String actualValue = vars.get(&quot;dockerComposeVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;dockerComposeVersionActual&quot;);
minVersion = props.getProperty(&quot;dockerComposeVersionMinimum&quot;);

//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the installed version of Ansible meets the minimum requirements" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${logTestName}" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
              <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}
</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor set testName - ansible --version" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">runTestName=&quot; ansible --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check ansible version &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ansibleVersionActual</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no version found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Ansible Version &quot;;
String expectedValue = props.getProperty(&quot;ansibleVersionMinimum&quot;); 
String actualValue = vars.get(&quot;ansibleVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;ansibleVersionActual&quot;);
minVersion = props.getProperty(&quot;ansibleVersionMinimum&quot;);

//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check  /etc/resolv.conf search clause" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH  Command -   -  Check /etc/resolv.conf search clause" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
              <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check /etc/resolv.conf search clause" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//set test name = check search clause in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
SPACE = &quot; &quot;;
 
runTestName=&quot; grep &quot; + QUOTE + &quot;search&quot; + BACKSLASH + &quot;s&quot; +  props.getProperty(&quot;defaultDNSzone&quot;) + QUOTE + SPACE + &quot;/etc/resolv.conf&quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check /etc/resolv.conf search clause &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (search)\s*(.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">resolvConfSearchActual</stringProp>
                <stringProp name="RegexExtractor.regex">(search)\s*(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$ $2$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">//Assertion : verify search clause value in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; /etc/resolv.conf search domain value &quot;;
String expectedValue = &quot;search &quot; + props.getProperty(&quot;defaultDNSzone&quot;); 
String actualValue = vars.get(&quot;resolvConfSearchActual&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}


// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));


</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check  /etc/resolv.conf nameserver " enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH  Command -   -  Check /etc/resolv.conf nameserver" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
              <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check /etc/resolv.conf nameserver" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//set test name = check search clause in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
SPACE = &quot; &quot;;
 
runTestName=&quot; grep &quot; + QUOTE + &quot;nameserver&quot; + BACKSLASH + &quot;s&quot; +  props.getProperty(&quot;dockerRepoNode&quot;) + QUOTE + SPACE + &quot;/etc/resolv.conf&quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check /etc/resolv.conf nameserver &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (nameserver)\s*(.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">resolvConfNameserverActual</stringProp>
                <stringProp name="RegexExtractor.regex">(nameserver)\s*(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$ $2$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">//Assertion : verify search clause value in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; /etc/resolv.conf nameserver value &quot;;
String expectedValue = &quot;nameserver &quot; + props.getProperty(&quot;dockerRepoNode&quot;); 
String actualValue = vars.get(&quot;resolvConfNameserverActual&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}


// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));


</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check if docker registry  V2 is available" enabled="true">
            <stringProp name="TestPlan.comments">sudo curl --cacert  /etc/docker/certs.d/dockerrepo\:5000/ca.crt https://dockerrepo:5000/v1/search?q=base</stringProp>
          </GenericController>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH  Command - Check if docker registry V2 is available" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
              <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}

use -1 for RegEx to create list of nameservers
loop through RegEx values comparing to dockerrepo node
</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check is docker repo is reachable" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//set test name = check search clause in /etc/resolv.conf
 
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
DASH = &quot;-&quot;;
SPACE = &quot; &quot;;
HASH = &quot;#&quot;;
PIPE = &quot;|&quot;;
COLON = &quot;:&quot;;
//sudo curl --tlsv1 --cacert /etc/docker/certs.d/dockerrepo\:5000/ca.crt -v  https://dockerrepo:5000/v2/

runTestName=&quot;sudo curl&quot; + SPACE + DASH + DASH + &quot;tlsv1&quot; + SPACE + DASH + DASH + &quot;cacert&quot; + SPACE + &quot;/etc/docker/certs.d/dockerrepo&quot; + BACKSLASH + COLON +&quot;5000/ca.crt -v https&quot; + COLON + &quot;//dockerrepo&quot; + COLON + &quot;5000/v2/_catalog&quot;;

//runTestName=&quot;sudo curl --cacert  /etc/docker/certs.d/dockerrepo\:5000/ca.crt https://dockerrepo:5000/v1/search?q=base&quot;;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot;sudo curl&quot; + SPACE + DASH + DASH + &quot;tlsv1&quot; + SPACE  + DASH + DASH + &quot;cacert&quot; + SPACE + &quot;/etc/docker/certs.d/dockerrepo&quot; + BACKSLASH + COLON +&quot;5000/ca.crt -v https&quot; + COLON + &quot;//dockerrepo&quot; + COLON + &quot;5000/v2/_catalog &quot;;
 vars.put(&quot;logTestName&quot;,logTestName);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (nameserver)\s*(.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dockerRegistryV2Actual</stringProp>
                <stringProp name="RegexExtractor.regex">(\{&quot;repositories&quot;\:)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">dockerRegistryQueryActual</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                <stringProp name="BeanShellAssertion.query">//Assertion : verify docker registry V2 availabilty
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

//String logTestName = &quot; dockerrepo:5000 &quot;;
String logTestName = vars.get(&quot;logTestName&quot;);
//String expectedValue = &quot;{&quot; + QUOTE + &quot;repositories&quot; + QUOTE + &quot;:[&quot; + QUOTE + &quot;registry&quot; + QUOTE + &quot;]}&quot;; 
String expectedValue = &quot;{&quot; + QUOTE + &quot;repositories&quot; + QUOTE + &quot;:&quot; ; 
String actualValue = vars.get(&quot;dockerRegistryV2Actual&quot;);
 
if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The response from &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The response from &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}

// log results

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
              <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Code Controller host tests " enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot; &quot;);
log.info(&quot;	### CDC- Code Controller Node Tests ###&quot;);
log.info(&quot; &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - retrieve Code Controller CDC hosts from inventory file" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name - get CDC hosts from inventory file" enabled="true">
              <stringProp name="BeanShellSampler.query">if ( props.getProperty(&quot;inventoryFile&quot;) != null) {
   inventoryFileName = props.getProperty(&quot;inventoryFile&quot;);
}
else {
	
	inventoryFileName = &quot;/home/docker/cloud-service-scripts/playbooks/inventory&quot;;
}

runTestName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; cdc --list-hosts 2&gt;&amp;1 &quot;;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; cdc --list-hosts 2&gt;&amp;1 &quot;;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} cdc  --list-hosts 2&gt;&amp;1" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cdcHostList</stringProp>
                <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
              <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
              <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
              <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log processing CDC nodes" enabled="true">
            <stringProp name="BeanShellSampler.query">PAD = &quot;     &quot;;
log.info(&quot; &quot;);
log.info(PAD + &quot;processing CDC nodes&quot;);
log.info(&quot; &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - for each Code Controller IP in the Inventory file create the Node alias" enabled="true">
            <stringProp name="ForeachController.inputVal">cdcHostList</stringProp>
            <stringProp name="ForeachController.returnVal">cdc_host</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">nodeNum</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="processing CDC Node${nodeNum} : IP Address ${cdc_host}" enabled="true">
              <stringProp name="BeanShellSampler.query">PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
log.info(PAD + &quot;CDC Node&quot;+vars.get(&quot;nodeNum&quot;) + &quot; IP Address: &quot; + vars.get(&quot;cdc_host&quot;));
log.info(PAD + &quot;---------------------------------------------------------------------&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler CDC Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the correct version of Ansible is installed" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${logTestName}" enabled="true">
                <stringProp name="hostname">${cdc_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}
${cdc_host}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor set Test name ansible --version " enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">runTestName=&quot; ansible --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check ansible version &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ansibleVersionActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no version found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare /etc/ntp.conf hosts to inventory hosts" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//Assertion : installed ansible version matches correct ansible version
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; Ansible Version &quot;;
String expectedValue = props.getProperty(&quot;ansibleVersion&quot;); 
String actualValue = vars.get(&quot;ansibleVersionActual&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}


// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the installed version of Ansible meets the minimum requirements" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${logTestName}" enabled="true">
                <stringProp name="hostname">${cdc_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}
</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor set testName - ansible --version" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">runTestName=&quot; ansible --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check ansible version &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ansibleVersionActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no version found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Ansible Version &quot;;
String expectedValue = props.getProperty(&quot;ansibleVersionMinimum&quot;); 
String actualValue = vars.get(&quot;ansibleVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;ansibleVersionActual&quot;);
minVersion = props.getProperty(&quot;ansibleVersionMinimum&quot;);

//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler CDC Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
              <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
              <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myEnddate = sdf.format(now); // format date as string
vars.put(&quot;myEnddate&quot;,myEnddate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - GUI_mode == &quot;true&quot;" enabled="true">
              <stringProp name="IfController.condition">&quot;${__property(GUI_mode,)}&quot; ==  &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - IaaS" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"> </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - VM host tests" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot; &quot;);
log.info(&quot;	### AVP VM Node Tests ###&quot;);
log.info(&quot; &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - retrieve ACP hosts from inventory file" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler  - process VMs " enabled="true">
              <stringProp name="BeanShellSampler.query"> 
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name - get ACP hosts from inventory file" enabled="true">
              <stringProp name="BeanShellSampler.query">if ( props.getProperty(&quot;inventoryFile&quot;) != null) {
   inventoryFileName = props.getProperty(&quot;inventoryFile&quot;);
}
else {
	
	inventoryFileName = &quot;/home/docker/cloud-service-scripts/playbooks/inventory&quot;;
}

//runTestName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; acp --list-hosts 2&gt;&amp;1 &quot;;
runTestName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; acp --list-hosts | grep -v `/usr/bin/ansible -i &quot; + inventoryFileName + &quot; dockerRepo --list-hosts` 2&gt;&amp;1 &quot;;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; acp --list-hosts 2&gt;&amp;1 &quot;;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} acp --list-hosts  | grep -v  `/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dockerRepo --list-hosts` 2&gt;&amp;1" enabled="true">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${runTestName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">IaaSHostList</stringProp>
                <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
              <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
              <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
              <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log processing ACP VM nodes" enabled="true">
            <stringProp name="BeanShellSampler.query">PAD = &quot;     &quot;;
log.info(&quot; &quot;);
log.info(PAD + &quot;processing ACP VM nodes&quot;);
log.info(&quot; &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - for each IP in the Inventory file create the Node alias" enabled="true">
            <stringProp name="ForeachController.inputVal">IaaSHostList</stringProp>
            <stringProp name="ForeachController.returnVal">Iaas_host</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">nodeNum</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="processing Node${nodeNum} : IP Address ${Iaas_host}" enabled="true">
              <stringProp name="BeanShellSampler.query">PAD = &quot;     &quot;;
log.info(&quot; &quot;);
log.info(&quot;ACP VM Node&quot;+vars.get(&quot;nodeNum&quot;) + &quot; IP Address: &quot; + vars.get(&quot;Iaas_host&quot;));
log.info(PAD + &quot;---------------------------------------------------------------------&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler IaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - uname test" enabled="false"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
                <stringProp name="BeanShellSampler.query">runTestName=&quot; uname -n &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; uname -n &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
                <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">serverName</stringProp>
                  <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
                <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
                <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
                <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check dockerrepo ping response" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ping -c 3 dockerrepo" enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name ping -c 3 dockerrepo" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">runTestName=&quot; ping -c 3 dockerrepo &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; ping dockerrepo &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (.*\b bytes from \b.*)" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerrepoPingResponseActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">dockerrepo ping failed</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (.*\b bytes from \b.*)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerrepoPingActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(bytes from )(\S+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                  <stringProp name="RegexExtractor.default">dockerrepo ping failed</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//Assertion : ping dockerrepo
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; ping dockerrepo &quot;;
//String expectedValue = &quot;--- dockerrepo.&quot; + ${__property(defaultDNSzone,)} + &quot; ping statistics ---&quot;;
dockerRepo = props.getProperty(&quot;dockerRepoNode&quot;);
//String expectedValue = &quot;bytes from &quot; + ${__property(dockerRepoNode,)} + COLON;
String expectedValue = &quot;bytes from &quot; +  props.getProperty(&quot;dockerRepoNode&quot;) + COLON;
//String expectedValue = props.getProperty(&quot;dockerVersion&quot;); 
String actualValue = vars.get(&quot;dockerrepoPingActual&quot;);
//if ( actualValue.equals(expectedValue) ) {
if ( expectedValue.indexOf(actualValue)  != -1) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The response from &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The response from &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}

// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the version of Docker installed meets the minimum requirements" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - docker --version" enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name docker --version" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">runTestName=&quot; docker --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check if Docker version meets minimum requirements &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);

logTestNameNoneFound=&quot; docker --version &quot;;
vars.put(&quot;logTestNameNoneFound&quot;,logTestNameNoneFound);

//apparently the BeanShell assertion with the function does not support the &quot;${__P(LOGMARKER,__ACP__)}&quot; syntax
// so... for the compare Docker Version against the min version configure the following property to be used 
sLOGMARKER = &quot;${__P(LOGMARKER,__ACP__)}&quot;;
props.setProperty(&quot;sLOGMARKER&quot;,sLOGMARKER);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerVersionActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(?:\S+ ){2}(\S+)\,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no version found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){w} matches 2 words (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Docker Version &quot;;
String expectedValue = props.getProperty(&quot;dockerVersionMinimum&quot;); 
String actualValue = vars.get(&quot;dockerVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;dockerVersionActual&quot;);
minVersion = props.getProperty(&quot;dockerVersionMinimum&quot;);

//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue  + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check if the installed version of Docker Compose meets the minimum requirements" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command  - docker-compose --version" enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">10000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set Test Name docker --version" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">runTestName=&quot; /usr/sbin/docker-compose --version &quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check Docker Compose version &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerComposeVersionActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no version found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){w} matches 2 words (\S+) will get the next word which is the vesion
command return string =
ansible 1.9.4   
configured module search path = None
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor [^ ]+$" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerComposeVersionActual</stringProp>
                  <stringProp name="RegexExtractor.regex">([^ ]+$)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no version found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">[^ ]+$ matches the last word preceed by a space
command return string =
docker-compose version: 1.4.0
docker-compose 1.2.0  

it will return 1.4.0 or 1.2.0 depending on the result
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (\d{1,}.*)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerComposeVersionActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d{1,}.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no version found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">[(\d{1,}\.)] matches 1 or more digits followed by a dot
command return string =
docker-compose version: 1.4.0
docker-compose 1.2.0  

it will return 1.4.0 or 1.2.0 depending on the result
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">public Integer versionCompare(String str1, String str2)
{
	/**
 * Compares two version strings. 
 * 
 * Use this instead of String.compareTo() for a non-lexicographical 
 * comparison that works for version strings. e.g. &quot;1.10&quot;.compareTo(&quot;1.6&quot;).
 * 
 * @note It does not work if &quot;1.10&quot; is supposed to be equal to &quot;1.10.0&quot;.
 * 
 * @param str1 a string of ordinal numbers separated by decimal points. 
 * @param str2 a string of ordinal numbers separated by decimal points.
 * @return The result is a negative integer if str1 is _numerically_ less than str2. 
 *         The result is a positive integer if str1 is _numerically_ greater than str2. 
 *         The result is zero if the strings are _numerically_ equal.
 */
    String[] vals1 = str1.split(&quot;\\.&quot;);
    String[] vals2 = str2.split(&quot;\\.&quot;);
    int i = 0;
    // set index to first non-equal ordinal or length of shortest version string
    while (i &lt; vals1.length &amp;&amp; i &lt; vals2.length &amp;&amp; vals1[i].equals(vals2[i])) 
    {
      i++;
    }
    // compare first non-equal ordinal number
    if (i &lt; vals1.length &amp;&amp; i &lt; vals2.length) 
    {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return Integer.signum(diff);
    }
    // the strings are equal or one string is a substring of the other
    // e.g. &quot;1.2.3&quot; = &quot;1.2.3&quot; or &quot;1.2.3&quot; &lt; &quot;1.2.3.4&quot;
    else
    {
        return Integer.signum(vals1.length - vals2.length);
    }
}
 
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String noVersionFound = &quot;no version found&quot;;
String logTestName = &quot; Docker Compose Version &quot;;
String expectedValue = props.getProperty(&quot;dockerComposeVersionMinimum&quot;); 
String actualValue = vars.get(&quot;dockerComposeVersionActual&quot;);

//vars.put(&quot;versionActual&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;versionMin&quot;,&quot;1.5&quot;);

actVersion = vars.get(&quot;dockerComposeVersionActual&quot;);
minVersion = props.getProperty(&quot;dockerComposeVersionMinimum&quot;);

//int retVal = versionCompare(actVersion,minVersion);

if ( actualValue.equals(noVersionFound)) {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     //FailureMessage=PAD2 + QUOTE + actualValue + QUOTE + &quot; does not equal the expected value of &quot; + QUOTE + expectedValue + QUOTE ;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);	
}


else if ( versionCompare(actVersion,minVersion) &gt;= 0) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; meets or exceeds the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
	vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
}
else {
	Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The installed&quot; + logTestName + QUOTE + actualValue + QUOTE + &quot; does not meet the minimum version of &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}	 

//use the LOGMARKER property setup in the BeanShell preProcessor above since the javascript type LOGMARKER appears to be invalid in this BeanShell Sampler
log.info( PAD + props.getProperty(&quot;sLOGMARKER&quot;) +  SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
 </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check  /etc/resolv.conf nameserver " enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH  Command - Check /etc/resolv.conf nameserver " enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}

use -1 for RegEx to create list of nameservers
loop through RegEx values comparing to dockerrepo node
</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check /etc/resolv.conf nameserver" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//set test name = check search clause in /etc/resolv.conf
 
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
SPACE = &quot; &quot;;
HASH = &quot;#&quot;;
PIPE = &quot;|&quot;;
 
runTestName=&quot; grep &quot; + QUOTE + &quot;nameserver&quot;  + QUOTE + SPACE + &quot;/etc/resolv.conf&quot; +SPACE  + PIPE + SPACE + &quot;grep -v&quot; + SPACE + BACKSLASH + HASH;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check /etc/resolv.conf nameserver &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (nameserver)\s*(.*)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">resolvConfNameserverActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(nameserver)\s*(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$ $2$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//Assertion : verify search clause value in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;


String logTestName = &quot; /etc/resolv.conf nameserver value &quot;;
String expectedValue = &quot;nameserver &quot; + props.getProperty(&quot;dockerRepoNode&quot;); 
String actualValue = vars.get(&quot;resolvConfNameserverActual&quot;);

//log.info(&quot;found &quot; + ${resolvConfNameserverActual_matchNr} + &quot; nameserver entries in /etc/resolv.conf&quot;);
 
int numNameservers = Integer.parseInt(&quot;${resolvConfNameserverActual_matchNr}&quot;);
//log.info(&quot;resolvConfNameserverActual_matchNr = &quot; + ${resolvConfNameserverActual_matchNr});

Boolean isMatch = false;
int i = 1;
String nCount = &quot;&quot;;
String resolvActualValue = &quot;&quot;;
String mismatchedValues = &quot;&quot;;


//loop through the macthes from the RegEx extractor and check if they match
while ((i &lt;= numNameservers) &amp;&amp; (isMatch == false)) {
     if (i == 1) {
          separtor = &quot;&quot;;
          logTestName = &quot; /etc/resolv.conf nameserver value &quot;;
       } else {
          separtor = &quot; &amp; &quot;;
          
       } 
	resolvActualValue = vars.get(&quot;resolvConfNameserverActual_&quot; +i);
	isMatch = resolvActualValue.equals(expectedValue);
	if (isMatch == false ) {
		//append to list of mismatches
		mismatchedValues = mismatchedValues + separtor + resolvActualValue ;
	}
	i++;
}

//log.info (&quot; the value of i is &quot; + i);
if ( isMatch == true ) {
	//since the RegEx Match No is -1, the default value will always be returned in resolvConfNameserverActual
	actualValue = expectedValue;
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
	actualValue = mismatchedValues;
	if ( i &lt;= 2 ) {
		matchPhrase = &quot; does not match the expected value &quot;;
	}
	else {
		logTestName = &quot; /etc/resolv.conf nameserver values &quot;;
		matchPhrase = &quot; do not match the expected value &quot;;
	}
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + matchPhrase + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}

// log results

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check  /etc/resolv.conf search clause" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH  Command -   -  Check /etc/resolv.conf search clause" enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check /etc/resolv.conf search clause" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//set test name = check search clause in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
SPACE = &quot; &quot;;
 
runTestName=&quot; grep &quot; + QUOTE + &quot;search&quot; + BACKSLASH + &quot;s&quot; +  props.getProperty(&quot;defaultDNSzone&quot;) + QUOTE + SPACE + &quot;/etc/resolv.conf&quot; ;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; Check /etc/resolv.conf search clause &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (search)\s*(.*)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">resolvConfSearchActual</stringProp>
                  <stringProp name="RegexExtractor.regex">(search)\s*(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$ $2$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//Assertion : verify search clause value in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; /etc/resolv.conf search domain value &quot;;
String expectedValue = &quot;search &quot; + props.getProperty(&quot;defaultDNSzone&quot;); 
String actualValue = vars.get(&quot;resolvConfSearchActual&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}


// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check if http://dockerrepo/service-scripts is reachable" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__property(dockerRepoNode,)}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">service-scripts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check /etc/resolv.conf search clause" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//set test name = check if http://dockerrepo/service-scripts is reachable
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
SPACE = &quot; &quot;;
 
//runTestName=&quot; grep &quot; + QUOTE + &quot;search&quot; + BACKSLASH + &quot;s&quot; +  props.getProperty(&quot;defaultDNSzone&quot;) + QUOTE + SPACE + &quot;/etc/resolv.conf&quot; ;
//vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot; http://dockerrepo/service-scripts &quot; ;
vars.put(&quot;logTestName&quot;,logTestName);
 
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">service-scripts-http-responseActual</stringProp>
                  <stringProp name="RegexExtractor.regex">\&lt;title\&gt;(Index of )\/(service-scripts)\&lt;\/title\&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                  <stringProp name="RegexExtractor.default">service-scripts not reachable</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//Assertion : verify http://dockerrepo/service-scripts is reachable clause value in /etc/resolv.conf
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

String logTestName = &quot; http://dockerrepo/service-scripts &quot;;
String expectedValue = &quot;Index of service-scripts&quot;; 
String actualValue = vars.get(&quot;service-scripts-http-responseActual&quot;);

if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + logTestName + &quot;is reachable &quot; ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + logTestName + &quot;is not reachable &quot; ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}


// log results


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - check if docker registry  V2 is available" enabled="true">
              <stringProp name="TestPlan.comments">sudo curl --cacert  /etc/docker/certs.d/dockerrepo\:5000/ca.crt https://dockerrepo:5000/v1/search?q=base</stringProp>
            </GenericController>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH  Command - Check if docker registry V2 is available" enabled="true">
                <stringProp name="hostname">${Iaas_host}</stringProp>
                <intProp name="port">22</intProp>
                <intProp name="connectionTimeout">5000</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="sshkeyfile"></stringProp>
                <stringProp name="passphrase"></stringProp>
                <stringProp name="command">${runTestName}</stringProp>
                <boolProp name="useReturnCode">false</boolProp>
                <boolProp name="printStdErr">false</boolProp>
                <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}

use -1 for RegEx to create list of nameservers
loop through RegEx values comparing to dockerrepo node
</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor -set TestName - check is docker repo is reachable" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//set test name = check search clause in /etc/resolv.conf
 
QUOTE = &quot;\&quot;&quot; ;
BACKSLASH = &quot;\\&quot;;
DASH = &quot;-&quot;;
SPACE = &quot; &quot;;
HASH = &quot;#&quot;;
PIPE = &quot;|&quot;;
COLON = &quot;:&quot;;
//sudo curl --tlsv1 --cacert /etc/docker/certs.d/dockerrepo\:5000/ca.crt -v  https://dockerrepo:5000/v2/

runTestName=&quot;sudo curl&quot; + SPACE + DASH + DASH + &quot;tlsv1&quot; + SPACE + DASH + DASH + &quot;cacert&quot; + SPACE + &quot;/etc/docker/certs.d/dockerrepo&quot; + BACKSLASH + COLON +&quot;5000/ca.crt -v https&quot; + COLON + &quot;//dockerrepo&quot; + COLON + &quot;5000/v2/_catalog&quot;;

//runTestName=&quot;sudo curl --cacert  /etc/docker/certs.d/dockerrepo\:5000/ca.crt https://dockerrepo:5000/v1/search?q=base&quot;;
vars.put(&quot;runTestName&quot;,runTestName);

logTestName=&quot;sudo curl&quot; + SPACE + DASH + DASH + &quot;tlsv1&quot; + SPACE  + DASH + DASH + &quot;cacert&quot; + SPACE + &quot;/etc/docker/certs.d/dockerrepo&quot; + BACKSLASH + COLON +&quot;5000/ca.crt -v https&quot; + COLON + &quot;//dockerrepo&quot; + COLON + &quot;5000/v2/_catalog &quot;;
 vars.put(&quot;logTestName&quot;,logTestName);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (nameserver)\s*(.*)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dockerRegistryV2Actual</stringProp>
                  <stringProp name="RegexExtractor.regex">(\{&quot;repositories&quot;\:)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">dockerRegistryQueryActual</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - compare actual vs expected values" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//Assertion : verify docker registry V2 availabilty
QUOTE = &quot;\&quot;&quot; ;
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
PAD2 = &quot;            - &quot;;
COLON = &quot;:&quot;;

//String logTestName = &quot; dockerrepo:5000 &quot;;
String logTestName = vars.get(&quot;logTestName&quot;);
//String expectedValue = &quot;{&quot; + QUOTE + &quot;repositories&quot; + QUOTE + &quot;:[&quot; + QUOTE + &quot;registry&quot; + QUOTE + &quot;]}&quot;; 
String expectedValue = &quot;{&quot; + QUOTE + &quot;repositories&quot; + QUOTE + &quot;:&quot; ; 
String actualValue = vars.get(&quot;dockerRegistryV2Actual&quot;);
 
if ( actualValue.equals(expectedValue) ) {
	Failure = false;
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	//log.info(&quot;Failure is FALSE &quot;);
	FailureMessage=&quot;&quot;;
	SuccessMessage=PAD2 + &quot;The response from &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; matches the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,SuccessMessage);
	 
}
else {
     Failure = true;
     vars.put(&quot;status&quot;,&quot; FAILED &quot;);
     //log.info(&quot;Failure is TRUE &quot;);
     SuccessMessage=&quot;&quot;;
     FailureMessage=PAD2 + &quot;The response from &quot; + logTestName + QUOTE +  actualValue + QUOTE + &quot; does not match the expected value &quot; + QUOTE + expectedValue + QUOTE ;
     vars.put(&quot;logDetailsMessage&quot;,FailureMessage);
}

// log results

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;logTestName&quot;) + vars.get(&quot;status&quot;) );
log.info(vars.get(&quot;logDetailsMessage&quot;));
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calculate PASS/FAIL totals" enabled="true">
                <stringProp name="BeanShellSampler.query">// calculate PASS/FAIL/TOTAL test counts

sampleResultOK = ${JMeterThread.last_sample_ok};

if   ( sampleResultOK ) {
	vars.put(&quot;status&quot;,&quot; PASSED &quot;);
	passedTests = props.getProperty(&quot;testsPassed&quot;);
	int passed = Integer.parseInt(passedTests);
	passed = passed + 1 ;

	props.setProperty(&quot;testsPassed&quot;,passed.toString());
}
else {
	
	vars.put(&quot;status&quot;,&quot; FAILED &quot;);

	failedTests = props.getProperty(&quot;testsFailed&quot;);
	int failed = Integer.parseInt(failedTests);
	failed = failed + 1 ;
	
	props.setProperty(&quot;testsFailed&quot;,failed.toString());
}

// summarize calculations
//
totalTests = props.getProperty(&quot;testsTotal&quot;);
int total = Integer.parseInt(totalTests);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int fail = Integer.parseInt(failedTests);

passedTests = props.getProperty(&quot;testsPassed&quot;);
int pass = Integer.parseInt(passedTests);

int total = pass + fail ;  
props.setProperty(&quot;testsTotal&quot;,total.toString());
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - GUI_mode == &quot;true&quot;" enabled="true">
              <stringProp name="IfController.condition">&quot;${__property(GUI_mode,)}&quot; ==  &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - IaaS" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"> </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - GUI_mode == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(GUI_mode,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - placeholder for GUI testing" enabled="false">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler IaaS Post Run" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myEnddate = sdf.format(now); // format date as string
vars.put(&quot;myEnddate&quot;,myEnddate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END IaaS - Infrastructure as a Service for Site Name = ${__property(serverSite,)} at ${myEnddate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">log.info(&quot;**********&quot;);
log.info(&quot;End of test for IaaS - Infrastructure as a Service for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myEnddate&quot;));
log.info(&quot;**********&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
