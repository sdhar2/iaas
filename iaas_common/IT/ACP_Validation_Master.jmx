<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan - ACP" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="*****" enabled="false">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">Jan-12-2016 : Rob Olenick : 00000 :Initial Creation of ACP_Validation_IaaS Integration Test
Feb-11-2016 : Rob Olenick : 00000 :Restore ACP_Validation_IaaS tests</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - non-GUI mode" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1439408841000</longProp>
        <longProp name="ThreadGroup.end_time">1439408841000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Initialize non-GUI mode" enabled="true">
          <stringProp name="BeanShellSampler.query">props.setProperty(&quot;stopTest&quot;,&quot;false&quot;);
//
// setup siteName for log file
//
vars.put(&quot;siteName&quot;,&quot;ACP Continuous Deployment Set&quot;);
props.setProperty(&quot;siteName&quot;,vars.get(&quot;siteName&quot;));
props.setProperty(&quot;serverSite&quot;,vars.get(&quot;siteName&quot;));
//
// Setup username and password
//
props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);
vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));
//
// Indicate which tests to run - default to ALL
//
//props.setProperty(&quot;bTestCommon&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestDBaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestIaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestLaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestLBaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestMaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestMonaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestSRDaaS&quot;,&quot;true&quot;);
//
// Indicate that no GUI tests to be run
//
props.setProperty(&quot;GUI_mode&quot;,&quot;false&quot;);
//log.info(&quot;Successfully executed JMter from linux command line&quot;);
vars.put(&quot;severSite&quot;,&quot;ACP&quot;);
log.info(&quot;Using defaultDNSzone &quot; + props.getProperty(&quot;defaultDNSzone&quot;));
 
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Abstract" enabled="false">
          <stringProp name="BeanShellSampler.query">Jan-12-2016 : Rob Olenick : 00000 :Intiaial Creation of ACP_Validation_IaaS Integration Test
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="*****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script"></stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="****GUI TESTING ONLY COMMENT OUT BEFORE DEPLOYING ********* setUp Thread Group - non-GUI mode" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1439408841000</longProp>
        <longProp name="ThreadGroup.end_time">1439408841000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - clear log area and Results Tree(s)" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.gui.GuiPackage;
import org.apache.jmeter.gui.JMeterGUIComponent;
import org.apache.jmeter.gui.tree.JMeterTreeNode;
import org.apache.jmeter.samplers.Clearable;

log.info(&quot;Clearing All ...&quot;);

guiPackage = GuiPackage.getInstance();

guiPackage.getMainFrame().clearData();
for (JMeterTreeNode node : guiPackage.getTreeModel().getNodesOfType(Clearable.class)) {
    JMeterGUIComponent guiComp = guiPackage.getGui(node.getTestElement());
    if (guiComp instanceof Clearable){
        Clearable item = (Clearable) guiComp;
        try {
            item.clearData();
        } catch (Exception ex) {
            log.error(&quot;Can&apos;t clear: &quot;+node+&quot; &quot;+guiComp, ex);
        }
    }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="****TESTING ONLY COMMENT OUT BEFORE DEPLOYING *********BeanShell Sampler - Initialize non-GUI mode " enabled="true">
          <stringProp name="BeanShellSampler.query">
//
// Indicate that GUI tests are to be run
//
props.setProperty(&quot;LOGMARKER&quot;,&quot;__ACP__&quot;);
props.setProperty(&quot;GUI_mode&quot;,&quot;true&quot;);

props.setProperty(&quot;stopTest&quot;,&quot;false&quot;);
props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.45.54&quot;); 
//props.setProperty(&quot;ansibleVersion&quot;,&quot;1.9.4&quot;);
//props.setProperty(&quot;dockerVersion&quot;,&quot;1.7.1&quot;);
//props.setProperty(&quot;dockerComposeVersion&quot;,&quot;1.2&quot;);
//props.setProperty(&quot;dockerRegistryVersion&quot;,&quot;0.9.1&quot;);
//props.setProperty(&quot;sshpassVersion&quot;,&quot;1.05&quot;);
//
// setup siteName for log file
//
vars.put(&quot;siteName&quot;,&quot;ACP Continuous Deployment Set&quot;);
props.setProperty(&quot;siteName&quot;,vars.get(&quot;siteName&quot;));
props.setProperty(&quot;serverSite&quot;,vars.get(&quot;siteName&quot;));
//
// Setup username and password
//
props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);
vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

//
// Indicate which tests to run - default to ALL
//
props.setProperty(&quot;bTestCommon&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestDBaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestIaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestLaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestLBaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestMaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestMonaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestSRDaaS&quot;,&quot;false&quot;);


//props.setProperty(&quot;bTestCommon&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestDBaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestIaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestLaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestLBaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestMaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestMonaaS&quot;,&quot;true&quot;);
//props.setProperty(&quot;bTestSRDaaS&quot;,&quot;true&quot;);


//log.info(&quot;Successfully executed JMeter from linux command line&quot;);
vars.put(&quot;severSite&quot;,&quot;Set Linux Test&quot;);


</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="*****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script"></stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - COMMON" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1439408841000</longProp>
        <longProp name="ThreadGroup.end_time">1439408841000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Initialize Common items" enabled="true">
          <stringProp name="BeanShellSampler.query">
int testsTotal = 0;
int testsPassed = 0;
int testsFailed = 0;

props.setProperty(&quot;testsTotal&quot;,testsTotal.toString());
props.setProperty(&quot;testsPassed&quot;,testsPassed.toString());
props.setProperty(&quot;testsFailed&quot;,testsFailed.toString());

//props.setProperty(&quot;LOGMARKER&quot;,&quot;__ARRIS__&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - GUI Mode dialog prompts" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1434047313000</longProp>
        <longProp name="ThreadGroup.end_time">1434047313000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler setUp" enabled="false">
          <stringProp name="BeanShellSampler.query">//

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - clear log area and Results Tree(s)" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.gui.GuiPackage;
import org.apache.jmeter.gui.JMeterGUIComponent;
import org.apache.jmeter.gui.tree.JMeterTreeNode;
import org.apache.jmeter.samplers.Clearable;

log.info(&quot;Clearing All ...&quot;);

guiPackage = GuiPackage.getInstance();

guiPackage.getMainFrame().clearData();
for (JMeterTreeNode node : guiPackage.getTreeModel().getNodesOfType(Clearable.class)) {
    JMeterGUIComponent guiComp = guiPackage.getGui(node.getTestElement());
    if (guiComp instanceof Clearable){
        Clearable item = (Clearable) guiComp;
        try {
            item.clearData();
        } catch (Exception ex) {
            log.error(&quot;Can&apos;t clear: &quot;+node+&quot; &quot;+guiComp, ex);
        }
    }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*************" enabled="false">
          <stringProp name="BeanShellSampler.query"> </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****NOTES********" enabled="false">
          <stringProp name="BeanShellSampler.query">/*
There is a bug in the SSH sampler that creates a persistent connection
which means that only 1 server connection can be made. This eliminates the
possibilty of connection to all the servers within a loop

http://jmeter-ssh-sampler.googlecode.com/svn/wiki/SshSamplerTutorial.wiki

== Limitations ==
The sampler does not (yet) handle commands that run continuously. For example, {{{ping}}} runs forever by default, therefore it is necessary to run {{{ping -n 4}}} for the sampler to return a value.

Additionally, the sampler opens a single persistent SSH session for each instance in each run. This may be problematic if there are many SSH Samplers in the test plan and the target system has restrictions on connection counts. In future, this will be reduced to a single connection per user/hostname/password triple.


*/</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*************" enabled="false">
          <stringProp name="BeanShellSampler.query"> </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Initialization" enabled="true">
          <stringProp name="BeanShellSampler.query">props.setProperty(&quot;stopTest&quot;,&quot;false&quot;);
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;&quot;); 

vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;GUI_mode&quot;,&quot;true&quot;);
props.setProperty(&quot;username&quot;,&quot;fldengr&quot;); 
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;); </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler JOptionPane prompt for set name" enabled="true">
          <stringProp name="TestPlan.comments">if cancel selected, the test will stop, otherwise site related vars are defined</stringProp>
          <stringProp name="BeanShellSampler.query">//Prompt for Site Name
//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforSite() 
{
 //   public static final String[] site = {&quot;other&quot;, &quot;Set_1 : 10.10.45.165&quot;, &quot;Set_2 : 10.10.45.165 &quot;, &quot;Set_3 : 10.10.45.165&quot;, &quot;Set_4 : 10.10.44.118&quot;, &quot;Lisle_Lab : 10.26.68.85&quot;,&quot;Network_46 : 10.10.46.182&quot;, &quot;Single_VM : 10.10.45.165&quot;, &quot;other&quot; };
 
 public static final String[] site = {
&quot;other&quot;, 
&quot;Set_1 : 10.10.35.166&quot;, 
&quot;Set_2 : 10.10.44.61 &quot;, 
&quot;Set_3 : 10.10.44.61&quot;, 
&quot;Set_4 : 10.10.44.118&quot;, 
&quot;Set_5 : 10.10.45.165&quot;, 
&quot;Set_6 : 10.10.45.188&quot;, 
&quot;Set_7 : 10.10.45.166&quot;, 
&quot;Set_8 : 10.10.35.166&quot;, 
&quot;Set_9 : 10.10.35.166&quot;, 
&quot;Set_10 : 10.10.44.22&quot;, 
&quot;Lisle_Lab : 10.26.68.85&quot;,
&quot;Network_46 : 10.10.46.182&quot;, 
&quot;Single_VM : 10.10.45.165&quot;, 
&quot;other&quot; };

    JFrame frame = new JFrame(&quot;Site Chooser&quot;);
    String selectedSite = (String) JOptionPane.showInputDialog(frame,
          &quot;Select a site&quot;,
          &quot;Site Chooser&quot;,
          JOptionPane.QUESTION_MESSAGE,
          null,
          site,
          site[6]);
          
      log.info(&quot;site selected :&quot; + selectedSite );
     // selectedSite will be null if the user clicks Cancel
      
      if ( selectedSite != null ) {
      	if ( selectedSite != &quot;other&quot;) {
             String siteNameShort = new String(selectedSite.substring(0,selectedSite.indexOf(&quot;:&quot;))) ;  
             
             String siteNameIP = new String(selectedSite.substring(selectedSite.indexOf(&quot;:&quot;)+1));
             dockerRepoIP = siteNameIP.trim();  
             log.info(&quot;IP from site selection :&quot; + dockerRepoIP);
      	   selectedSite = siteNameShort.trim();
      	   
      	   log.info(&quot;Sitename shortened to :&quot; + selectedSite);
     	   props.setProperty(&quot;dockerRepoNode&quot;,dockerRepoIP); 
             vars.put(&quot;sshIP&quot;,dockerRepoIP);
      	}
      	
      	props.setProperty(&quot;siteName&quot;,selectedSite);
      	props.setProperty(&quot;serverSite&quot;,selectedSite);
      	
         // props.setProperty(&quot;siteName&quot;,siteNameShort);
         
          }
     else {
         props.setProperty(&quot;siteName&quot;,&quot;&quot;);
         props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
     }
}

PromptforSite();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Prompt for DockerRepo IP" enabled="false">
          <stringProp name="BeanShellSampler.query">//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforDockerRepoIP() 
{
    
    dockerRepoNode = props.getProperty(&quot;dockerRepoNode&quot;);

    JFrame frame = new JFrame(&quot;DockerRepo IP Address&quot;);
    String dockerRepoNode = (String) JOptionPane.showInputDialog(frame,
          &quot;Enter a the DockerRepo IP address&quot;,
          &quot;DockerRepo IP&quot;,
          JOptionPane.QUESTION_MESSAGE,
          null,
          null,
          dockerRepoNode
          );
      
      log.info(&quot;Docker Repo IP entered :&quot; + dockerRepoIP );
     
      // dockerRepoNode will be null if the user clicks Cancel
      if ( dockerRepoNode != null ) {
           props.setProperty(&quot;dockerRepoNode&quot;,dockerRepoNode);
           }
      else {
          props.setProperty(&quot;dockerRepoNode&quot;,&quot;&quot;);
          props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
      }
}

PromptforDockerRepoIP();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="false">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - prompt for username and password" enabled="true">
          <stringProp name="BeanShellSampler.query">//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforLogin() 
{
    JFrame frame = new JFrame(&quot;Login&quot;);
    
    JPanel panel = new JPanel(new BorderLayout(5, 5));

    JPanel label = new JPanel(new GridLayout(0, 1, 2, 2));
      label.add(new JLabel(&quot;Username:&quot;, SwingConstants.RIGHT));
      label.add(new JLabel(&quot;Password:&quot;,SwingConstants.RIGHT));
      panel.add(label, BorderLayout.WEST); 

    JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
      JTextField userName = new JTextField(10);
      userName.setText(props.getProperty(&quot;username&quot;));
      controls.add(userName);
   
      JPasswordField password = new JPasswordField(10);
      password.setEchoChar(&apos;*&apos;);
      controls.add(password);
      password.setText(props.getProperty(&quot;password&quot;));
      panel.add(controls, BorderLayout.CENTER);

     int result = JOptionPane.showConfirmDialog(frame, panel, 
               &quot;Please Enter Username and Password&quot;, JOptionPane.OK_CANCEL_OPTION);
   
     if (result == JOptionPane.OK_OPTION) {
         log.info(&quot;username: &quot; + userName.getText());
         props.setProperty(&quot;username&quot;,userName.getText());
         log.info(&quot;password: &quot; + password.getText());
         props.setProperty(&quot;password&quot;, password.getText());
     }

     else {
         props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
     }

     
}

PromptforLogin();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler JOptionPane prompt for Services to Test " enabled="true">
          <stringProp name="TestPlan.comments">if cancel selected, the test will stop, otherwise site related vars are defined</stringProp>
          <stringProp name="BeanShellSampler.query">import javax.swing.*;

selectServiceToTest() 
{
	JCheckBox cb_CheckNodes = new JCheckBox(&quot;Check Nodes 1-8 : General Node Testing&quot;,true);      
	JCheckBox cb_SRDaas = new JCheckBox(&quot;SRDaaS : Sevice Registration &amp; Discovery as a Service&quot;,true);      
	JCheckBox cb_DBaaS = new JCheckBox(&quot;DBaaS : Database as a Service&quot;,true);      
	JCheckBox cb_LaaS = new JCheckBox(&quot;LaaS : Logging as a Service&quot;,true);      
	JCheckBox cb_MaaS = new JCheckBox(&quot;MaaS : Messaging as a Service&quot;,true);   
	JCheckBox cb_MonaaS = new JCheckBox(&quot;MonaaS : Monintoring as a Service&quot;,true);   
	JCheckBox cb_LBaaS = new JCheckBox(&quot;LBaaS : Load Balancer as a Service&quot;,true);    
 


	JPanel myPanel = new JPanel();

	myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
	
	myPanel.add(cb_CheckNodes);
	myPanel.add(cb_SRDaas);
	myPanel.add(cb_DBaaS);
	myPanel.add(cb_LaaS);
	myPanel.add(cb_MaaS);
	myPanel.add(cb_MonaaS);
	myPanel.add(cb_LBaaS);

	int result = JOptionPane.showConfirmDialog(null, myPanel, 
	&quot;Select Services to test&quot;, JOptionPane.OK_CANCEL_OPTION);
	
        if (result == JOptionPane.OK_OPTION) {
		// log.info(&quot;sec value: &quot; + ssField.getText());

		bTestNodes = cb_CheckNodes.isSelected();
		bTestSRDaaS = cb_SRDaas.isSelected();
		bTestDBaaS = cb_DBaaS.isSelected();
		bTestLaaS = cb_LaaS.isSelected();
		bTestMaaS = cb_MaaS.isSelected();
		bTestMonaaS  = cb_MonaaS.isSelected();
     	bTestLBaaS  = cb_LBaaS.isSelected();
		

     	log.info(&quot;Test SRDaaS = &quot; + bTestNodes);
     	log.info(&quot;Test SRDaaS = &quot; + bTestSRDaaS);
		log.info(&quot;Test DBaaS = &quot; + bTestDBaaS);
		log.info(&quot;Test LaaS = &quot; + bTestLaaS);
		log.info(&quot;Test MaaS = &quot; + bTestMaaS);
		log.info(&quot;Test MonaaS = &quot; + bTestMonaaS);
     	log.info(&quot;Test LBaaS = &quot; + bTestLBaaS);

props.setProperty(&quot;bTestNodes&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestSRDaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestDBaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestLaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestMaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestMonaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestLBaaS&quot;,&quot;false&quot;);

		count = 7;
		i = 0;
		if ( bTestNodes) {
			i = i + 1;
			props.setProperty(&quot;bTestNodes&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;Nodes&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestSRDaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestSRDaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;SRDaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestDBaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestDBaaS&quot;, &quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;DBaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestLaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestLaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;LaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestMaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestMaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;MaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestMonaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestMonaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;MonaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		props.setProperty(&quot;testServicesCount&quot;,i.toString());

		if ( bTestLBaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestLBaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;LBaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		props.setProperty(&quot;testServicesCount&quot;,i.toString());

	}
        else {
               props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
         }

}
selectServiceToTest();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller - setup Site variables base on user selected site" enabled="true">
          <stringProp name="TestPlan.comments">switch on siteName value - strings must match, or default will be chosen</stringProp>
          <stringProp name="SwitchController.value">${__property(siteName,)}</stringProp>
        </SwitchController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;default&quot;);

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_1" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set 1&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.45.165&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_2" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set_2&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.10.10&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_3" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set_3&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.10.10&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Lisle_Lab" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Lisle_Lab&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.26.68.85&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_4" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set_4&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.44.118&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Network 45" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Network_45&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.45.182&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Network 46" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Network_46&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.46.182&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Single_VM" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;SingleVM&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="other" enabled="true">
            <stringProp name="TestPlan.comments">If other is chosen, a prompt for the IP will be displayed</stringProp>
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Other&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Prompt for DockerRepo IP

//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforDockerRepoIP() 
{
    
    dockerRepoNode = props.getProperty(&quot;dockerRepoNode&quot;);

    JFrame frame = new JFrame(&quot;DockerRepo IP Address&quot;);
    String dockerRepoNode = (String) JOptionPane.showInputDialog(frame,
          &quot;Enter the DockerRepo IP address&quot;,
          &quot;DockerRepo IP&quot;,
          JOptionPane.QUESTION_MESSAGE,
          null,
          null,
          dockerRepoNode
          );
      
      log.info(&quot;Docker Repo IP entered :&quot; + dockerRepoNode );
     
      // dockerRepoNode will be null if the user clicks Cancel
      if ( dockerRepoNode != null ) {
           props.setProperty(&quot;dockerRepoNode&quot;,dockerRepoNode);
           }
      else {
          props.setProperty(&quot;dockerRepoNode&quot;,&quot;&quot;);
          props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
      }
}

PromptforDockerRepoIP();

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - ACP Main - Include" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1439398579000</longProp>
        <longProp name="ThreadGroup.end_time">1439398579000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">jmeter.apache.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - parse inventory file - map services to nodes" enabled="true">
          <stringProp name="TestPlan.comments">Use the inventory file to setup the mapping between nodes and services
</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - show inventory filename" enabled="true">
            <stringProp name="BeanShellSampler.query">// show invetntory filename and hosts to be processed

log.info(&quot;The IPs in the inventory file : ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} &quot; );


log.info(&quot;dockerRepoNode : ${__P(dockerRepoNode,&quot;not defined&quot;)} &quot; );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} etcdCluster --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} etcdCluster --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">etcdClusterChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} zkCluster --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} zkCluster --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">zkClusterChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} lbaas --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} lbaas --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lbaasChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} haproxy --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} haproxy --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">haproxyChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} elk --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} elk --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">elkChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} maas --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} maas --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">maasChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} advisor --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} advisor --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">advisorChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dbaas --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dbaas --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaasChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} keepalived --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} keepalived --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keepalivedChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} ntp --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} ntp --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ntpChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} acp --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} acp --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">acpChildren</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - GUI_mode == &quot;true&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${__property(GUI_mode,)}&quot; ==  &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - services setup" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler - services setup" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="--" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="#NOTE: run the IaaS tests first" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestIaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestIaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - IaaS - Infrastructure as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_IaaS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="--" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestCommon == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestCommon,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - tests to move to Common Fragment" enabled="false"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - get Inventory file" enabled="false">
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">cat /home/docker/cloud-service-scripts/playbooks/inventory  | head -n 17 | tail -n 16 | grep -v node</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node</stringProp>
                <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noInventory</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - create Node list from Inventory file" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">inventoryList = props.getProperty(&quot;Node&quot;);
log.info(&quot;The IPs in the inventory file : ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} &quot; );
//log.info(&quot;advisor IP: &quot; + vars.get(&quot;advisorHost_IP&quot;) );</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="false"/>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - for each IP in the Inventory file create the Node alias" enabled="false">
              <stringProp name="ForeachController.inputVal">Node</stringProp>
              <stringProp name="ForeachController.returnVal">NodeIP</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">nodeNum</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="processing Node${nodeNum} : IP Address ${NodeIP}" enabled="true">
                <stringProp name="BeanShellSampler.query">
log.info(&quot;Node&quot;+vars.get(&quot;nodeNum&quot;) + &quot; IP Address: &quot; + vars.get(&quot;NodeIP&quot;));</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="showing varible  Node_8 =  ${Node_8}" enabled="false">
                <stringProp name="BeanShellSampler.query">
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_1 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node1 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_1}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot; 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node1_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 1 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 1 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node1_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_2 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node2 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_2}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node2_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 2 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 2 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node2_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_3 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node3 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_3}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node3_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 3 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 3 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node3_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_4 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node4 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_4}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node4_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 4 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 4 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node4_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_5 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node5 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_5}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node5_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 5 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 5 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node5_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_6 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node5 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_6}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node6_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 6 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 6 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node6_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_7 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node7 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_7}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node7_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 7 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 7 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node7_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_8 Tests" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node8 - check for &quot;checker&quot; processes" enabled="true">
                <stringProp name="hostname">${Node_8}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Node8_checker_processes_ps_return</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 8 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 8 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node8_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - Common" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_Common.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestSRDaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestSRDaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - SRDaaS - Service Registration &amp; Discovery as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_SRDaasS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestLaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestLaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - LaaS - Logging as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_LaaS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestLBaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestLBaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - LBaaS - Load Balancer as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_LBaaS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestMaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestMaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - MaaS - Messaging as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_MaaS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestMonaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestMonaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - MonaaS - Monitoring as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_MonaaS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestDBaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestDBaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller - DBaaS - Monitoring as a Service" enabled="true">
            <stringProp name="IncludeController.includepath">ACP_Validation_DBaaS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - display Summary " enabled="true">
          <stringProp name="BeanShellSampler.query">// **
// ** Display Summary
//**
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
totalTestCount = props.getProperty(&quot;testsTotal&quot;);
passedTestCount = props.getProperty(&quot;testsPassed&quot;);
failedTestCount = props.getProperty(&quot;testsFailed&quot;);

log.info(&quot;===================================================================================&quot;);
log.info(&quot;================================= RESULTS SUMMARY =================================&quot;);
log.info(PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + passedTestCount + &quot; tests PASSED , &quot; + failedTestCount + &quot; tests FAILED , out of &quot; + totalTestCount );
log.info(&quot;===================================================================================&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Main" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1416264430000</longProp>
        <longProp name="ThreadGroup.end_time">1416264430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*************" enabled="false">
          <stringProp name="BeanShellSampler.query"> </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****NOTES********" enabled="false">
          <stringProp name="BeanShellSampler.query">/*
There is a bug in the SSH sampler that creates a persistent connection
which means that only 1 server connection can be made. This eliminates the
possibilty of connection to all the servers within a loop

http://jmeter-ssh-sampler.googlecode.com/svn/wiki/SshSamplerTutorial.wiki

== Limitations ==
The sampler does not (yet) handle commands that run continuously. For example, {{{ping}}} runs forever by default, therefore it is necessary to run {{{ping -n 4}}} for the sampler to return a value.

Additionally, the sampler opens a single persistent SSH session for each instance in each run. This may be problematic if there are many SSH Samplers in the test plan and the target system has restrictions on connection counts. In future, this will be reduced to a single connection per user/hostname/password triple.


*/</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*************" enabled="false">
          <stringProp name="BeanShellSampler.query"> </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Initialization" enabled="true">
          <stringProp name="BeanShellSampler.query">props.setProperty(&quot;stopTest&quot;,&quot;false&quot;);
props.setProperty(&quot;dockerRepoNode&quot;,&quot;&quot;); 

vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler JOptionPane prompt for set name" enabled="true">
          <stringProp name="TestPlan.comments">if cancel selected, the test will stop, otherwise site related vars are defined</stringProp>
          <stringProp name="BeanShellSampler.query">//Prompt for Site Name
//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforSite() 
{
 //   public static final String[] site = {&quot;other&quot;, &quot;Set_1 : 10.10.45.165&quot;, &quot;Set_2 : 10.10.45.165 &quot;, &quot;Set_3 : 10.10.45.165&quot;, &quot;Set_4 : 10.10.44.118&quot;, &quot;Lisle_Lab : 10.26.68.85&quot;,&quot;Network_46 : 10.10.46.182&quot;, &quot;Single_VM : 10.10.45.165&quot;, &quot;other&quot; };
 
 public static final String[] site = {
&quot;other&quot;, 
&quot;Set_1 : 10.10.35.166&quot;, 
&quot;Set_2 : 10.10.44.61 &quot;, 
&quot;Set_3 : 10.10.44.61&quot;, 
&quot;Set_4 : 10.10.44.118&quot;, 
&quot;Set_5 : 10.10.45.165&quot;, 
&quot;Set_6 : 10.10.45.188&quot;, 
&quot;Set_7 : 10.10.45.166&quot;, 
&quot;Set_8 : 10.10.35.166&quot;, 
&quot;Set_9 : 10.10.35.166&quot;, 
&quot;Set_10 : 10.10.44.22&quot;, 
&quot;Lisle_Lab : 10.26.68.85&quot;,
&quot;Network_46 : 10.10.46.182&quot;, 
&quot;Single_VM : 10.10.45.165&quot;, 
&quot;other&quot; };

    JFrame frame = new JFrame(&quot;Site Chooser&quot;);
    String selectedSite = (String) JOptionPane.showInputDialog(frame,
          &quot;Select a site&quot;,
          &quot;Site Chooser&quot;,
          JOptionPane.QUESTION_MESSAGE,
          null,
          site,
          site[6]);
          
      log.info(&quot;site selected :&quot; + selectedSite );
     // selectedSite will be null if the user clicks Cancel
      
      if ( selectedSite != null ) {
      	if ( selectedSite != &quot;other&quot;) {
             String siteNameShort = new String(selectedSite.substring(0,selectedSite.indexOf(&quot;:&quot;))) ;  
             
             String siteNameIP = new String(selectedSite.substring(selectedSite.indexOf(&quot;:&quot;)+1));
             dockerRepoIP = siteNameIP.trim();  
             log.info(&quot;IP from site selection :&quot; + dockerRepoIP);
      	   selectedSite = siteNameShort.trim();
      	   
      	   log.info(&quot;Sitename shortened to :&quot; + selectedSite);
     	   props.setProperty(&quot;dockerRepoNode&quot;,dockerRepoIP); 
             vars.put(&quot;sshIP&quot;,dockerRepoIP);
      	}
      	
      	props.setProperty(&quot;siteName&quot;,selectedSite);
      	
         // props.setProperty(&quot;siteName&quot;,siteNameShort);
         
          }
     else {
         props.setProperty(&quot;siteName&quot;,&quot;&quot;);
         props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
     }
}

PromptforSite();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Prompt for DockerRepo IP" enabled="false">
          <stringProp name="BeanShellSampler.query">//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforDockerRepoIP() 
{
    
    dockerRepoNode = props.getProperty(&quot;dockerRepoNode&quot;);

    JFrame frame = new JFrame(&quot;DockerRepo IP Address&quot;);
    String dockerRepoNode = (String) JOptionPane.showInputDialog(frame,
          &quot;Enter a the DockerRepo IP address&quot;,
          &quot;DockerRepo IP&quot;,
          JOptionPane.QUESTION_MESSAGE,
          null,
          null,
          dockerRepoNode
          );
      
      log.info(&quot;Docker Repo IP entered :&quot; + dockerRepoIP );
     
      // dockerRepoNode will be null if the user clicks Cancel
      if ( dockerRepoNode != null ) {
           props.setProperty(&quot;dockerRepoNode&quot;,dockerRepoNode);
           }
      else {
          props.setProperty(&quot;dockerRepoNode&quot;,&quot;&quot;);
          props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
      }
}

PromptforDockerRepoIP();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller - setup Site variables base on user selected site" enabled="true">
          <stringProp name="TestPlan.comments">switch on siteName value - strings must match, or default will be chosen</stringProp>
          <stringProp name="SwitchController.value">${__property(siteName,)}</stringProp>
        </SwitchController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;default&quot;);

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_1" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set 1&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.45.165&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_2" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set_2&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.10.10&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_3" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set_3&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.10.10&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Lisle_Lab" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Lisle_Lab&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.26.68.85&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set_4" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Set_4&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.44.118&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Network 45" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Network_45&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.45.182&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Network 46" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Network_46&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.46.182&quot;); 
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Single_VM" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;SingleVM&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="other" enabled="true">
            <stringProp name="TestPlan.comments">If other is chosen, a prompt for the IP will be displayed</stringProp>
            <stringProp name="BeanShellSampler.query">vars.put(&quot;severSite&quot;,&quot;Other&quot;);
// **
// ** save to properties to enable sharing between threads
//**
//vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Prompt for DockerRepo IP

//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforDockerRepoIP() 
{
    
    dockerRepoNode = props.getProperty(&quot;dockerRepoNode&quot;);

    JFrame frame = new JFrame(&quot;DockerRepo IP Address&quot;);
    String dockerRepoNode = (String) JOptionPane.showInputDialog(frame,
          &quot;Enter the DockerRepo IP address&quot;,
          &quot;DockerRepo IP&quot;,
          JOptionPane.QUESTION_MESSAGE,
          null,
          null,
          dockerRepoNode
          );
      
      log.info(&quot;Docker Repo IP entered :&quot; + dockerRepoNode );
     
      // dockerRepoNode will be null if the user clicks Cancel
      if ( dockerRepoNode != null ) {
           props.setProperty(&quot;dockerRepoNode&quot;,dockerRepoNode);
           }
      else {
          props.setProperty(&quot;dockerRepoNode&quot;,&quot;&quot;);
          props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
      }
}

PromptforDockerRepoIP();

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - prompt for username and password" enabled="true">
          <stringProp name="BeanShellSampler.query">//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
PromptforLogin() 
{
    JFrame frame = new JFrame(&quot;Login&quot;);
    
    JPanel panel = new JPanel(new BorderLayout(5, 5));

    JPanel label = new JPanel(new GridLayout(0, 1, 2, 2));
      label.add(new JLabel(&quot;Username:&quot;, SwingConstants.RIGHT));
      label.add(new JLabel(&quot;Password:&quot;,SwingConstants.RIGHT));
      panel.add(label, BorderLayout.WEST); 

    JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
      JTextField userName = new JTextField(10);
      userName.setText(props.getProperty(&quot;username&quot;));
      controls.add(userName);
   
      JPasswordField password = new JPasswordField(10);
      password.setEchoChar(&apos;*&apos;);
      controls.add(password);
      password.setText(props.getProperty(&quot;password&quot;));
      panel.add(controls, BorderLayout.CENTER);

     int result = JOptionPane.showConfirmDialog(frame, panel, 
               &quot;Please Enter Username and Password&quot;, JOptionPane.OK_CANCEL_OPTION);
   
     if (result == JOptionPane.OK_OPTION) {
         log.info(&quot;username: &quot; + userName.getText());
         props.setProperty(&quot;username&quot;,userName.getText());
         log.info(&quot;password: &quot; + password.getText());
         props.setProperty(&quot;password&quot;, password.getText());
     }

     else {
         props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
     }

     
}

PromptforLogin();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler JOptionPane prompt for Services to Test " enabled="true">
          <stringProp name="TestPlan.comments">if cancel selected, the test will stop, otherwise site related vars are defined</stringProp>
          <stringProp name="BeanShellSampler.query">import javax.swing.*;

selectServiceToTest() 
{
	JCheckBox cb_CheckNodes = new JCheckBox(&quot;Check Nodes 1-8 : General Node Testing&quot;,true);      
	JCheckBox cb_SRDaas = new JCheckBox(&quot;SRDaaS : Sevice Registration &amp; Discovery as a Service&quot;,true);      
	JCheckBox cb_DBaaS = new JCheckBox(&quot;DBaaS : Database as a Service&quot;,true);      
	JCheckBox cb_LaaS = new JCheckBox(&quot;LaaS : Logging as a Service&quot;,true);      
	JCheckBox cb_MaaS = new JCheckBox(&quot;MaaS : Messaging as a Service&quot;,true);   
	JCheckBox cb_MonaaS = new JCheckBox(&quot;MonaaS : Monintoring as a Service&quot;,true);   
	JCheckBox cb_LBaaS = new JCheckBox(&quot;LBaaS : Load Balancer as a Service&quot;,true);    
 


	JPanel myPanel = new JPanel();

	myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
	
	myPanel.add(cb_CheckNodes);
	myPanel.add(cb_SRDaas);
	myPanel.add(cb_DBaaS);
	myPanel.add(cb_LaaS);
	myPanel.add(cb_MaaS);
	myPanel.add(cb_MonaaS);
	myPanel.add(cb_LBaaS);

	int result = JOptionPane.showConfirmDialog(null, myPanel, 
	&quot;Select Services to test&quot;, JOptionPane.OK_CANCEL_OPTION);
	
        if (result == JOptionPane.OK_OPTION) {
		// log.info(&quot;sec value: &quot; + ssField.getText());

		bTestNodes = cb_CheckNodes.isSelected();
		bTestSRDaaS = cb_SRDaas.isSelected();
		bTestDBaaS = cb_DBaaS.isSelected();
		bTestLaaS = cb_LaaS.isSelected();
		bTestMaaS = cb_MaaS.isSelected();
		bTestMonaaS  = cb_MonaaS.isSelected();
     	bTestLBaaS  = cb_LBaaS.isSelected();
		

     	log.info(&quot;Test SRDaaS = &quot; + bTestNodes);
     	log.info(&quot;Test SRDaaS = &quot; + bTestSRDaaS);
		log.info(&quot;Test DBaaS = &quot; + bTestDBaaS);
		log.info(&quot;Test LaaS = &quot; + bTestLaaS);
		log.info(&quot;Test MaaS = &quot; + bTestMaaS);
		log.info(&quot;Test MonaaS = &quot; + bTestMonaaS);
     	log.info(&quot;Test LBaaS = &quot; + bTestLBaaS);

props.setProperty(&quot;bTestNodes&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestSRDaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestDBaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestLaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestMaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestMonaaS&quot;,&quot;false&quot;);
props.setProperty(&quot;bTestLBaaS&quot;,&quot;false&quot;);

		count = 7;
		i = 0;
		if ( bTestNodes) {
			i = i + 1;
			props.setProperty(&quot;bTestNodes&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;Nodes&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestSRDaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestSRDaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;SRDaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestDBaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestDBaaS&quot;, &quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;DBaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestLaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestLaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;LaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestMaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestMaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;MaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		if ( bTestMonaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestMonaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;MonaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		props.setProperty(&quot;testServicesCount&quot;,i.toString());

		if ( bTestLBaaS) {
			i = i + 1;
			props.setProperty(&quot;bTestLBaaS&quot;,&quot;true&quot;);
			vars.put(&quot;testServices_&quot; + i,&quot;LBaaS&quot;);
			testValue = vars.get(&quot;testServices_&quot; + i);
			//log.info(&quot;value of testServices_&quot; + i + &quot; is &quot; +  testValue );
		}
		props.setProperty(&quot;testServicesCount&quot;,i.toString());

	}
        else {
               props.setProperty(&quot;stopTest&quot;,&quot;true&quot;);
         }

}
selectServiceToTest();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - If Cancel selected - stop the test" enabled="true">
          <stringProp name="TestPlan.comments">siteName Initialized to &quot;stop&quot;; if Cancel on site selection, end the test</stringProp>
          <stringProp name="IfController.condition">&quot;${__property(stopTest,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myStartdate = sdf.format(now); // format date as string
vars.put(&quot;myStartdate&quot;,myStartdate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BEGIN Site Name = ${severSite} at ${myStartdate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">log.info(&quot;**********&quot;);
site = vars.get(&quot;severSite&quot;);
logdate = vars.get(&quot;myStartdate&quot;);
log.info(&quot;Start of test for &quot; + site + &quot; at &quot; + logdate);
log.info(&quot;**********&quot;); </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestDNodes == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestNodes,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - get Inventory file" enabled="true">
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="command">cat /home/docker/cloud-service-scripts/playbooks/inventory  | head -n 17 | tail -n 16 | grep -v node</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Node</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noInventory</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - create Node list from Inventory file" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">inventoryList = props.getProperty(&quot;Node&quot;);
log.info(&quot;The IPs in the inventory file : &quot;);
//log.info(&quot;advisor IP: &quot; + vars.get(&quot;advisorHost_IP&quot;) );</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - for each IP in the Inventory file create the Node alias" enabled="true">
            <stringProp name="ForeachController.inputVal">Node</stringProp>
            <stringProp name="ForeachController.returnVal">NodeIP</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">nodeNum</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="processing Node${nodeNum} : IP Address ${NodeIP}" enabled="true">
              <stringProp name="BeanShellSampler.query">
log.info(&quot;Node&quot;+vars.get(&quot;nodeNum&quot;) + &quot; IP Address: &quot; + vars.get(&quot;NodeIP&quot;));</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="showing varible  Node_8 =  ${Node_8}" enabled="false">
              <stringProp name="BeanShellSampler.query">
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_1 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node1 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_1}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot; 2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node1_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 1 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 1 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node1_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_2 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node2 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_2}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node2_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 2 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 2 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node2_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_3 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node3 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_3}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node3_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 3 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 3 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node3_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_4 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node4 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_4}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node4_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 4 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 4 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node4_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_5 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node5 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_5}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node5_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 5 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 5 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node5_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_6 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node5 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_6}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node6_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">no checker processing running</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 6 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 6 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node6_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_7 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node7 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_7}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node7_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 7 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 7 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node7_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="***** Run Node_8 Tests" enabled="true"/>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - logon to Node8 - check for &quot;checker&quot; processes" enabled="true">
              <stringProp name="hostname">${Node_8}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="command">ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;  2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Node8_checker_processes_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- Node 8 : ps -elf | grep checker | grep -v grep | grep &quot;/usr/sbin&quot;" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
QUOTE = &quot;\&quot;&quot; ;
COLON = &quot;:&quot;;
SLASH = &quot;/&quot; ;
SPACE = &quot; &quot;;

logMessage = &quot;Node 8 : ps -elf | grep checker | grep -v grep | grep &quot; + QUOTE + SLASH + &quot;usr&quot; + SLASH + &quot;sbin&quot; + QUOTE + SPACE + COLON + SPACE + vars.get(&quot;Node8_checker_processes_ps_return&quot;);
log.info(logMessage);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestNode8 == &quot;true&quot;" enabled="false">
          <stringProp name="IfController.condition">&quot;${__property(bTestNode8,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Node8 - DBaaS" enabled="true">
            <stringProp name="TestPlan.comments">check all components of Node8</stringProp>
          </GenericController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** " enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** Node8 - DBaaS *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;Node8 : DBaaS&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler Node8 Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Verify etcdcluster set" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 set /etcdctl/test/test99 whatever</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteSetResult</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 set /etcdctl/test/test99 whatever" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1934383586">whatever</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster set result ${etcdclusteSetResult}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 set /etcdctl/test/test99 whatever : &quot; + vars.get(&quot;etcdclusteSetResult&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Verify etcdcluster get" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteGetResult</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1934383586">whatever</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster get result = ${etcdclusteGetResult}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99  : &quot; + vars.get(&quot;etcdclusteGetResult&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="verify etcdcluster rm" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 rm /etcdctl/test/test99 2&gt;&amp;1</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteRemoveResult</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster rm result = ${etcdclusteRemoveResult}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 rm /etcdctl/test/test99  : &quot; + vars.get(&quot;etcdclusteRemoveResult&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Verify etcdcluster rm worked via get" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99 2&gt;&amp;1</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteGetResultAfter</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99 2&gt;&amp;1" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67232232">Error</stringProp>
                  <stringProp name="-947293356">Key not found</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster get result after remove = ${etcdclusteGetResultAfter}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99  : &quot; + vars.get(&quot;etcdclusteGetResultAfter&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Verify all respective keys are set in the etcd cluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 ls / --recursive</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor [\s\S]*" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteKeys</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 ls / --recursive" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="102756125">lbaas</stringProp>
                  <stringProp name="-1435920693">etcdctl</stringProp>
                  <stringProp name="1789464955">database</stringProp>
                  <stringProp name="757584761">postgres</stringProp>
                  <stringProp name="-989932909">pgpool</stringProp>
                  <stringProp name="-1221262756">health</stringProp>
                  <stringProp name="3343558">maas</stringProp>
                  <stringProp name="-95168706">rabbitmq</stringProp>
                  <stringProp name="-1354792126">config</stringProp>
                  <stringProp name="-1131323456">advisor</stringProp>
                  <stringProp name="100516">elk</stringProp>
                  <stringProp name="3313767">laas</stringProp>
                  <stringProp name="-894258098">srdaas</stringProp>
                  <stringProp name="-705696772">loadbalancer</stringProp>
                  <stringProp name="695070997">haproxy</stringProp>
                  <stringProp name="-894258098">srdaas</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster Keys ${etcdclusteKeys}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 ls / --recursive  : &quot; + vars.get(&quot;etcdclusteKeys&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler SRDaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - SRDaas" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestSRDaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestSRDaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SRDaaS - Service Registration &amp; Discovery as a Service" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** " enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** SRDaaS - Service Registration &amp; Discovery as a Service *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;SRDaaS : Service Registration &amp; Discovery as a Service&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler SRDaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">uname -n</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">serverName</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - uname -n" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1360770807">(?i)dockerrepo</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">host etcdcluster</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdcluster</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdcluster</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdcluster_IP</stringProp>
                <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdcluster_IP</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">2</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host etcdcluster" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1601458038">(?i)etcdcluster.clouddvr.org has address</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host etcdcluster  = ${etcdcluster}" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping etcdcluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ping -c 5 etcdcluster</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusterPingResponse</stringProp>
                <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping etcdcluster" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1423308339">(?i)--- etcdcluster.clouddvr.org ping statistics ---</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster IP = ${etcdcluster_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;etcdcluster : &quot; + vars.get(&quot;etcdcluster&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping etcdcluster  ${etcdclusterPingResponse}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping etcdcluster : &quot; + vars.get(&quot;etcdclusterPingResponse&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -check which machines are part of the cluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">curl -L http://${etcdcluster_IP}:4001/v2/members</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusterNodes</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - curl -L http://${etcdcluster_IP}:4001/v2/members" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="69259622">peerURLs</stringProp>
                  <stringProp name="1102444367">clientURLs</stringProp>
                  <stringProp name="948881689">members</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster node ${etcdclusterNodes}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;curl -L http://${etcdcluster_IP}:4001/v2/members : &quot; + vars.get(&quot;etcdclusterNodes&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify etcdcluster set" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 set /etcdctl/test/test99 whatever</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteSetResult</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 set /etcdctl/test/test99 whatever" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1934383586">whatever</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster set result ${etcdclusteSetResult}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 set /etcdctl/test/test99 whatever : &quot; + vars.get(&quot;etcdclusteSetResult&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify etcdcluster get" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteGetResult</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1934383586">whatever</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster get result = ${etcdclusteGetResult}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99  : &quot; + vars.get(&quot;etcdclusteGetResult&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -verify etcdcluster rm" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 rm /etcdctl/test/test99 2&gt;&amp;1</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteRemoveResult</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster rm result = ${etcdclusteRemoveResult}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 rm /etcdctl/test/test99  : &quot; + vars.get(&quot;etcdclusteRemoveResult&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify etcdcluster rm worked via get" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99 2&gt;&amp;1</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (.*)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteGetResultAfter</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99 2&gt;&amp;1" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67232232">Error</stringProp>
                  <stringProp name="-947293356">Key not found</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster get result after remove = ${etcdclusteGetResultAfter}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 get /etcdctl/test/test99  : &quot; + vars.get(&quot;etcdclusteGetResultAfter&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify all respective keys are set in the etcd cluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 ls / --recursive</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor [\s\S]*" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">etcdclusteKeys</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - /usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 ls / --recursive" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="102756125">lbaas</stringProp>
                  <stringProp name="-1435920693">etcdctl</stringProp>
                  <stringProp name="1789464955">database</stringProp>
                  <stringProp name="757584761">postgres</stringProp>
                  <stringProp name="-989932909">pgpool</stringProp>
                  <stringProp name="-1221262756">health</stringProp>
                  <stringProp name="3343558">maas</stringProp>
                  <stringProp name="-95168706">rabbitmq</stringProp>
                  <stringProp name="-1354792126">config</stringProp>
                  <stringProp name="-1131323456">advisor</stringProp>
                  <stringProp name="100516">elk</stringProp>
                  <stringProp name="3313767">laas</stringProp>
                  <stringProp name="-894258098">srdaas</stringProp>
                  <stringProp name="-705696772">loadbalancer</stringProp>
                  <stringProp name="695070997">haproxy</stringProp>
                  <stringProp name="-894258098">srdaas</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- etcdcluster Keys ${etcdclusteKeys}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;/usr/sbin/etcdctl --no-sync -peers ${etcdcluster_IP}:4001 ls / --recursive  : &quot; + vars.get(&quot;etcdclusteKeys&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler SRDaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - SRDaas" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestDBaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestDBaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DBaaS - Database as a Service" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** DBaaS - Database as a Service *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;DBaaS : Database as a Service&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler DBaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">uname -n</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">serverName</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">host dbaascluster</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dbaascluster</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dbaascluster_IP</stringProp>
                <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host dbaascluster" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2130523199">(?i)dbaascluster.clouddvr.org has address</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host dbaascluster  = ${dbaascluster}" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping dbaascluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ping -c 5 dbaascluster</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dbaasclusterPingResponse</stringProp>
                <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping dbaascluster" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="217351678">(?i)--- dbaascluster.clouddvr.org ping statistics ---</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- dbaasluster IP = $dbaascluster_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;dbaascluster : &quot; + vars.get(&quot;dbaascluster&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping dbaascluster  ${dbaasclusterPingResponse}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping dbaascluster : &quot; + vars.get(&quot;dbaasclusterPingResponse&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10</stringProp>
              <stringProp name="hostname">${dbaascluster_IP}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ps_pgPool_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Resonse Assetion - ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1059702154">pgpool: wait for connection request</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep</stringProp>
              <stringProp name="hostname">${dbaascluster_IP}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ps_pgPool_process_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="309184012">pgpool -f /usr/local/etc/pgpool.conf -a /usr/local/etc/pool_hba.conf -F /usr/local/etc/pcp.conf -n -D</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep pgpool = ${ps_pgPool_return}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep pgpool : &quot; + vars.get(&quot;ps_pgPool_return&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef | grep &quot;postgres: logger&quot;" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ps -ef | grep &quot;postgres: logger&quot;</stringProp>
              <stringProp name="hostname">${dbaascluster_IP}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ps_PostgresLogger_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep receiver" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2112450046">postgres: logger process</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep pgpool = ${ps_PostgresLogger_return}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep \&quot;postgres: logger\&quot; : &quot; + vars.get(&quot;ps_PostgresLogger_return&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef | grep receiver" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ps -ef | grep receiver</stringProp>
              <stringProp name="hostname">${dbaascluster_IP}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ps_Receiver_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-703720037">postgres: wal receiver process</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep receiver = ${ps_PostgresLogger_return}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep reciever : &quot; + vars.get(&quot;ps_Receiver_return&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef | grep sender" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ps -ef | grep sender</stringProp>
              <stringProp name="hostname">${dbaascluster_IP}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ps_Sender_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep sender" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-125103327">postgres: wal sender process</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep sender = ${ps_PostgresLogger_return}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep sender : &quot; + vars.get(&quot;ps_Sender_return&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - sudo docker ps" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">sudo docker ps</stringProp>
              <stringProp name="hostname">${dbaascluster_IP}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">sudo_docker_ps_return</stringProp>
                <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker ps" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1672141480">dockerrepo:5000/arrs/arrs-cloud-base-keymanager</stringProp>
                  <stringProp name="-1545474224">dockerrepo:5000/arrs/arrs-cloud-base-logstash-forwarder</stringProp>
                  <stringProp name="905871821">dockerrepo:5000/arrs/arrs-cloud-base-pgpool</stringProp>
                  <stringProp name="1030402478">dockerrepo:5000/arrs/arrs-cloud-base-pgpool-app-monitor</stringProp>
                  <stringProp name="-407368516">dockerrepo:5000/arrs/arrs-cloud-base-app-observer</stringProp>
                  <stringProp name="1559796787">dockerrepo:5000/arrs/arrs-cloud-base-postgres</stringProp>
                  <stringProp name="339895060">dockerrepo:5000/arrs/arrs-cloud-base-postgres-app-monitor</stringProp>
                  <stringProp name="-407368516">dockerrepo:5000/arrs/arrs-cloud-base-app-observer</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- sudo docker ps = ${sudo_docker_ps_return}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;sudo docker ps : &quot; + vars.get(&quot;sudo_docker_ps_return&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler DBaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - DBaaS" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - sudo docker  ps | grep arrs-cloud-base-pgpool: | awk &apos;{print $1&apos;}" enabled="true">
                <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
                <stringProp name="command">sudo docker  ps | grep arrs-cloud-base-pgpool: | awk &apos;{print $1&apos;}</stringProp>
                <stringProp name="hostname">${dbaascluster_IP}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker  ps | grep arrs-cloud-base-pgpool: | awk &apos;{print $1&apos;}" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1877705804">dockerrepo:5000/arrs/arrs-cloud-base-pgpool-app-monitor:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pgpoolDockerContainerID</stringProp>
                  <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- sudo docker  ps | grep arrs-cloud-base-pgpool: | awk &apos;{print $1&apos;} = ${pgpoolDockerContainerID}" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;pgpool docker id : &quot; + vars.get(&quot;pgpoolDockerContainerID&quot;) );</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - sudo docker exec -it a572d548cdae ping dbaascluster -c 3 ; uname -n" enabled="true">
                <stringProp name="TestPlan.comments">enter docker container for pgpool (dockerrepo:5000/arrs/arrs-cloud-base-pgpool:1.3.0.29) 
and enter a ping command</stringProp>
                <stringProp name="hostname">${dbaascluster_IP}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">sudo docker exec -it ${pgpoolDockerContainerID} ping dbaascluster -c 3  </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker exec -it a572d548cdae ping dbaascluster -c 3 ; uname -n" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1262484821">--- dbaascluster.clouddvr.org ping statistics ---</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pgpoolDockerContainerPing_dbaascluster_response</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping dbaascluster from Docker Container ${pgpoolDockerContainerID}  : ${pgpoolDockerContainerPing_dbaascluster_response}" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping dbaascluster from within Docker Conatainer &quot; + vars.get(&quot;pgpoolDockerContainerID&quot;) + &quot; : &quot; + vars.get(&quot;pgpoolDockerContainerPing_dbaascluster_response&quot;) );</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- RUNNING COMMAND ssh ${dbaascluster_IP} ${__property(username,)} / ${__property(password,)}  sudo docker exec  ${pgpoolDockerContainerID} cat /etc/hosts &gt; /tmp/reo_hosts" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler put containerID into a property" enabled="false">
                <stringProp name="BeanShellSampler.query">props.setProperty(&quot;pgpool_DockerContainerID&quot;,vars.get(&quot;pgpoolDockerContainerID&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ${dbaascluster_IP} as ${__property(username,)} - sudo docker exec -it ${pgpoolDockerContainerID} cat /etc/hosts" enabled="true">
                <stringProp name="TestPlan.comments">no -i and -t to have response returned

sudo docker exec  ${pgpoolDockerContainerID} cat /etc/hosts &gt; /tmp/reo_hosts</stringProp>
                <stringProp name="hostname">${dbaascluster_IP}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">sudo docker exec ${__property(pgpool_DockerContainerID,)} cat /etc/hosts </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">props.setProperty(&quot;pgpool_DockerContainerID&quot;,vars.get(&quot;pgpoolDockerContainerID&quot;));
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pgpoolDockerContainerID_cat_etc_hosts</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- cat /etc/hosts from Docker Container:${pgpoolDockerContainerID}:${pgpoolDockerContainerID_cat_etc_hosts}" enabled="true">
                <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;cat /etc/hosts from within Docker Conatainer &quot; + vars.get(&quot;pgpoolDockerContainerID&quot;) + &quot; : &quot; + vars.get(&quot;pgpoolDockerContainerID_cat_etc_hosts&quot;) );</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ${dbaascluster_IP} as ${__property(username,)} - sudo docker exec -it ${pgpoolDockerContainerID} cat /etc/hosts &gt; /tmp/reo_hosts" enabled="false">
                <stringProp name="TestPlan.comments">no -i and -t to have response returned

sudo docker exec  ${pgpoolDockerContainerID} cat /etc/hosts &gt; /tmp/reo_hosts</stringProp>
                <stringProp name="hostname">${dbaascluster_IP}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">sudo docker exec ${__property(pgpool_DockerContainerID,)} cat /etc/hosts &gt; /tmp/reo_hosts</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">props.setProperty(&quot;pgpool_DockerContainerID&quot;,vars.get(&quot;pgpoolDockerContainerID&quot;));
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker ps" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="991585451">${pgpoolDockerContainerID}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pgpoolDockerContainerID_cat_etc_hosts</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command hardcode container ID  ${dbaascluster_IP} as ${__property(username,)} - sudo docker exec -it ${pgpoolDockerContainerID} cat /etc/hosts" enabled="false">
                <stringProp name="hostname">${dbaascluster_IP}</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">${__property(username,)}</stringProp>
                <stringProp name="password">${__property(password,)}</stringProp>
                <stringProp name="command">sudo docker exec a572d548cdae cat /etc/hosts &gt; /tmp/cat_a572d548cdae_etc_hosts</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker ps" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="991585451">${pgpoolDockerContainerID}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pgpoolDockerContainerID_cat_etc_hostsHC</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">noName</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- cat /etc/hosts from Docker Container ${pgpoolDockerContainerID}  : ${pgpoolDockerContainerID_cat_etc_hostsHC}" enabled="false">
                <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;cat /etc/hosts from within Docker Conatainer &quot; + vars.get(&quot;pgpoolDockerContainerID&quot;) + &quot; : &quot; + vars.get(&quot;pgpoolDockerContainerID_cat_etc_hostsHC&quot;) );</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestLaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestLaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LaaS - Logging as a Service" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** LaaS - Logging as a Service *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;LaaS : Logging as a Service&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler LaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">uname -n</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">serverName</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">host elk</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">elkHost</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">elkHost_IP</stringProp>
                <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host elk" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1745589552">(?i)elk.clouddvr.org has address</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host elk  = ${elkHost}" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- elk IP = ${elkHost_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;elk IP: &quot; + vars.get(&quot;elkHost_IP&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- elk  URL https://${elkHost_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
//elkHost_IP=vars.get(&quot;elkHost_IP&quot;);
log.info(&quot;elk URL: https://${elkHost_IP} &quot; );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping elk" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ping -c 5 elk</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">elkHostPingResponse</stringProp>
                <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping elk" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1308688109">(?i)--- elk.clouddvr.org ping statistics ---</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping elk  ${elkHostPingResponse}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping elk : &quot; + vars.get(&quot;elkHostPingResponse&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${elkHost_IP}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - http 200 code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler - Launch Kibana webpage" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value"> /new-window</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">https://${elkHost_IP}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">exec(&quot;chrome www.google.com&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler LaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - LaaS" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestMaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestMaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MaaS - Messaging as a Service" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** MaaS - Messaging as a Service *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;MaaS : Messaging as a Service&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler MaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">uname -n</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">serverName</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">host maas</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">maasHost</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">maasHost_IP</stringProp>
                <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host maas" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1891045280">(?i)maas.clouddvr.org has address</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host maas  = ${maasHost}" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- maas IP = ${maasHost_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;maas IP: &quot; + vars.get(&quot;maasHost_IP&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- maas URL http://${maasHost_IP}:15672" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
//elkHost_IP=vars.get(&quot;elkHost_IP&quot;);
log.info(&quot;maas RabbitMQ URL: http://${maasHost_IP}:15672 &quot; );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler - Launch RabbitMQ webpage" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value"> /new-window</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">http://${maasHost_IP}:15672</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping maas" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ping -c 5 maas</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">maasHostPingResponse</stringProp>
                <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping maas" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-112977763">(?i)--- maas.clouddvr.org ping statistics ---</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping mass  ${maasHostPingResponse}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping maas : &quot; + vars.get(&quot;maasHostPingResponse&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${maasHost_IP}</stringProp>
              <stringProp name="HTTPSampler.port">15672</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler MaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - MaaS" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">host advisorserver</stringProp>
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">advisorHost</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">advisorHost_IP</stringProp>
              <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host elk" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2067846289">(?i)advisorserver.clouddvr.org has address</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestMonaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestMonaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MonaaS - Monitoring as a Service" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****  MonaaS - Monitoring as a Service *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;MonaaS : Monitoring as a Service&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler MonaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">uname -n</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">serverName</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host advisorserver  = ${advisorHost}" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- advisor IP = ${asvisorHost_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;advisor IP: &quot; + vars.get(&quot;advisorHost_IP&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- advisor  URL https://${advisorHost_IP}:8040" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
//elkHost_IP=vars.get(&quot;elkHost_IP&quot;);
log.info(&quot;advisor URL: https://${advisorHost_IP}:8040 &quot; );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping advisorserver" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ping -c 5 advisorserver</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">elkHostPingResponse</stringProp>
                <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping elk" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1806382612">(?i)--- advisorserver.clouddvr.org ping statistics ---</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping advisorserver  ${advisorHostPingResponse}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping advisorserver : &quot; + vars.get(&quot;advisorHostPingResponse&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${advisorHost_IP}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - http 200 code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler - Launch Advisor webpage" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value"> /new-window</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">https://${advisorHost_IP}:8040</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler MonaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - MonaaS" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - bTestLBaaS == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(bTestLBaaS,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LBaaS - Load Balancer as a Service" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** LBaaS - Load Balancer as a Service *****" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;LBaaS : Load Balancer as a Service&quot;);
log.info(&quot;______________________________________________________&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler LBaaS Pre Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">uname -n</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">serverName</stringProp>
                <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">noName</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">host lbaas</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(username,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lbaasHost</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lbaasHost_IP</stringProp>
                <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host lbaas" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-283378505">(?i)lbaas.clouddvr.org has address</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host lbaas  = ${lbaasHost}" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- lbaas IP = ${lbaasHost_IP}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;lbaas IP: &quot; + vars.get(&quot;lbaasHost_IP&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping lbaas" enabled="true">
              <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
              <stringProp name="command">ping -c 5 lbaas</stringProp>
              <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <intProp name="port">22</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lbaasHostPingResponse</stringProp>
                <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">not_defined</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping lbaas" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2007628602">(?i)--- lbaas.clouddvr.org ping statistics ---</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping lbass  ${lbaasHostPingResponse}" enabled="true">
              <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping lbass : &quot; + vars.get(&quot;lbaasHostPingResponse&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler - Launch nginx webpage" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value"> /new-window</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">http://${lbaasHost_IP}:9500</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler LBaaS Post Run" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - LBaaS" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="*****" enabled="true"/>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myEnddate = sdf.format(now); // format date as string
vars.put(&quot;myEnddate&quot;,myEnddate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END Site Name = ${severSite} at ${myEnddate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">site = vars.get(&quot;severSite&quot;);
logdate = vars.get(&quot;myEnddate&quot;);
log.info(&quot;**********&quot;);
log.info(&quot;End of test for &quot; + site + &quot; at &quot; + logdate);
log.info(&quot;**********&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler JOptionPane show Test Complete Message" enabled="true">
          <stringProp name="TestPlan.comments">if cancel selected, the test will stop, otherwise site related vars are defined</stringProp>
          <stringProp name="BeanShellSampler.query">//import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
 
ShowMessage() 
{
     

    JFrame frame = new JFrame(&quot;Test Run for $siteServer Complete&quot;);
    JOptionPane.showMessageDialog(frame,
          &quot;Test Completed&quot;,
          &quot;Installation Test Verification&quot;,
          JOptionPane.INFORMATION_MESSAGE);
     
}
 
// JOptionPane.ERROR_MESSAGE for STOP sign
// JOptionPane.WARNING_MESSAGE for Exclatmation
// 

ShowMessage();

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
